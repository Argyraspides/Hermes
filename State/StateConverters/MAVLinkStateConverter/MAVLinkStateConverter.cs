/*

                                       


88        88  88888888888  88888888ba   88b           d88  88888888888  ad88888ba  
88        88  88           88      "8b  888b         d888  88          d8"     "8b 
88        88  88           88      ,8P  88`8b       d8'88  88          Y8,         
88aaaaaaaa88  88aaaaa      88aaaaaa8P'  88 `8b     d8' 88  88aaaaa     `Y8aaaaa,   
88""""""""88  88"""""      88""""88'    88  `8b   d8'  88  88"""""       `"""""8b, 
88        88  88           88    `8b    88   `8b d8'   88  88                  `8b 
88        88  88           88     `8b   88    `888'    88  88          Y8a     a8P 
88        88  88888888888  88      `8b  88     `8'     88  88888888888  "Y88888P"  


                            MESSENGER OF THE MACHINES

*/


using Godot;
using System.Text.Json;


// This class' sole purpose is to take a MAVLink message and convert it into an in-program
// vehicle state representation. This file specifically assumes a standard version of MAVLink
// (in this case, those MAVLink messages defined in common.xml in the MAVLink project https://mavlink.io/en/messages/common.html)
//
// As an example, it can take a MAVLink message in a JSON format,
// defined as:
// {
//     "type": "GLOBAL_POSITION_INT",
//     "msgid": 33,
//     "timestamp": "2024-12-23T13:25:24.557992",
//     "time_boot_ms": 7048,
//     "lat": 473979712,
//     "lon": 85461636,
//     "alt": 475,
//     "relative_alt": -15,
//     "vx": 0,
//     "vy": -1,
//     "vz": -2,
//     "hdg": 9126
// }
// And convert it into an in-vehicle state. Since this is a state regarding a vehicle's position,
// which is a core part of any vehicle regardless of what it is, it will be converted into a CoreState.
//
// This state converter relies on the MAVLinkDeserializer to get deserialized MAVLink JSON messages,
// and so it is important that this is loaded into the scene tree *after* MAVLinkDeserializer
//
// TODO: There is a potential issue here with compatibility.
// MAVLink sometimes evolves into new versions, yet the state converter basically hardcodes certain
// fields (e.g., right now field with value 33 is assumed to be GLOBAL_POSITION_INT). Given that 
// the pymavsdk.py file is deserializing to JSON, we shouldn't need to make hardcoded assumptions like this.
// Thus, pymavsdk.py should theoretically be our single source of truth for what a MAVLink message is. But, at the same time,
// we shouldn't have to synchronize this state converter with pymavsdk.py. So really, both MAVLinkStateConverter
// and pymavsdk.py should have common.xml (for more info see https://mavlink.io/en/messages/common.html)
// as the single source of truth instead (since after all, the common.xml file is, by definition,
// what MAVLink even it).
// 
// 
// Here is a proposed solution:
//
// (1): Given that pymavsdk.py already assumes common.xml as the set of messages,
// there should be some generator script that converts the common.xml to a C# dictionary
// that maps the actual string name/message ID in common.xml to a variable name which will never change in the 
// program. This way any changes to MAVLink means we don't need to change MAVLinkStateConverter at all --
// we simply need to grab the common.xml file and re-generate the dictionary mappings. This could also
// be automated just before compile-time. Thus making both our MAVLinkStateConverter and pymavsdk.py file
// derived from common.xml rather than MAVLinkStateConverter being reliant on pymavsdk.py (requiring synchronization)
//
// The process would be:
// pymavsdk, which is launched by the ExternalLauncher, deserializes raw UDP/TCP/Whatever MAVLink packets to JSON
// ->
// MAVLinkStateConverter eventually receives these JSON MAVLink messages
// -> 
// MAVLinkStateConverter identifies the message type not based on a hardcoded integer value,
// but rather through the string name of the type or an ID (e.g., "GLOBAL_POSITION_INT" or 33) which
// is turned into a variable (this variable having been generated by the generator script)
// ->
// MAVLinkStateConverter converts the state and goes on its merry way
// 
public partial class MAVLinkStateConverter : Node
{
	// Signal equivalent in C#
	[Signal]
	public delegate void VehicleCoreStateReceivedEventHandler(CoreState coreState);


	// Converts a MAVLink JSON message into a core vehicle state.
	// A core vehicle state is a state that applies to all vehicles regardless
	// of what it does/doesn't have, e.g., a position, a velocity, an acceleration, etc.
	public CoreState ConvertMavlinkJsonToCoreState(JsonWrapper wrapper)
	{
		var coreState = new CoreState();
		JsonElement jsonMessage = wrapper.Data;

		int msgId = jsonMessage.GetProperty("msgid").GetInt32();

		switch (msgId)
		{
			case 0: // Heartbeat message
				int vehicleType = jsonMessage.GetProperty("type").GetInt32();

				switch (vehicleType)
				{
					case 2:
						coreState.VehicleType = VehicleType.GenericQuadcopter;
						break;
				}
				break;

			case 33: // GLOBAL_POSITION_INT message
					 // Earth Position
				coreState.EarthPosition = new Vector3(
					jsonMessage.GetProperty("lat").GetInt32() / 1e7f,  // Convert to degrees
					jsonMessage.GetProperty("lon").GetInt32() / 1e7f,  // Convert to degrees
					jsonMessage.GetProperty("alt").GetInt32() / 1e2f   // Convert to meters
				);

				// Ground Velocity (convert from cm/s to m/s)
				coreState.GroundVel = new Vector3(
					jsonMessage.GetProperty("vx").GetInt32() / 1e2f,
					jsonMessage.GetProperty("vy").GetInt32() / 1e2f,
					jsonMessage.GetProperty("vz").GetInt32() / 1e2f
				);

				// Earth Heading (convert from centidegrees to degrees)
				coreState.EarthHeading = jsonMessage.GetProperty("hdg").GetInt32() / 1e2f;
				break;
		}

		return coreState;
	}


	// JSON message has been received from the MAVLink deserializer.
	// Here we convert the MAVLink message to a state and emit the appropriate signal
	// that a state has been created.
	private void OnMavLinkDeserializerMavlinkJsonMessageReceived(JsonWrapper mavlinkJsonPacket)
	{
		var coreState = ConvertMavlinkJsonToCoreState(mavlinkJsonPacket);
		EmitSignal("VehicleCoreStateReceived", coreState);
	}


	public override void _Ready()
	{
		var mavlinkDeserializerNode = MAVLinkDeserializer.Instance;
		mavlinkDeserializerNode.MAVLinkJsonMessageReceived += OnMavLinkDeserializerMavlinkJsonMessageReceived;
	}
}